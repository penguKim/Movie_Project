<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.c5d2308t1.mapper.MoviesMapper">
	<!-- DB에 저장된 영화 목록 리스트 조회 작업 -->
	<select id="selectMoviesList" resultType="HashMap">
		SELECT *
		FROM movies
		WHERE movie_status = 1
		<choose>
			<when test="sortType == 1">
				ORDER BY movie_release_date DESC
			</when>
			<when test="sortType == 2">
				ORDER BY movie_title ASC
			</when>
			<when test="sortType == 3">
				ORDER BY movie_audience DESC
			</when>
		</choose>
	</select>
	
	<!-- 요청한 movie_id에 해당하는 영화정보 조회 작업 요청 -->
	<select id="selectMovieDetail" resultType="HashMap">
		SELECT *
		FROM movies
		WHERE movie_id = #{movie_id}
	</select>

<!-- 	리뷰 작성 -->
	<insert id="insertReviewBoard">
		INSERT INTO reviews
		VALUES(
			 NULL
			,0
			, #{review_content}
			, now()
			, #{sId}
			, #{movie_id}
		)
	</insert>
	
	<!-- 찜하기 정보 조회 -->
	<select id="selectLike">
		SELECT *
		FROM likes
		WHERE 
			member_id = #{member_id}
		AND movie_id = #{movie_id}
	</select>
	
	<!-- 찜하기 정보 등록 -->
	<insert id="insertLike">
		INSERT INTO likes
		VALUES (
			null
			, #{member_id}
			, #{movie_id}
		)
	</insert>
	
	<!-- 찜하기 정보 삭제 -->
	<delete id="deleteLike">
		DELETE FROM likes
		WHERE 
			member_id = #{member_id}
		AND movie_id = #{movie_id}
	</delete>
	
	<!-- 회원의 좋아요 정보 불러오기 -->
	<select id="selectLikeList">
		SELECT *
		FROM likes
		WHERE 
			member_id = #{sId}
	</select>

	 <!-- 관객수 업데이트를 위한 UPDATE 구문 -->
	 <update id="updateMovieAudiAcc">
	 		UPDATE movies
	 		SET movie_audience = #{movie_audience}
	 		WHERE movie_id = #{movie_id}
	 </update>
	 
		<!-- 
	List 타입을 파라미터로 지정시 parameterType를 지정하고
	forEach의 collection="list" item="item" separator=","을 기본값으로 사용한다.
	list 안의 객체를 item에 담아서 저장한뒤 ,로 구분한다.
	INSERT 가 PK 중복으로 입력되지 않을 경우 ON DUPLICATE KEY UPDATE를 사용한다.
	이때, 넣어주는 값은 #{}가 아닌 values(멤버변수명)으로 지정한다.
	 -->
	<insert id="upsertMovieCd" parameterType="java.util.List">
		INSERT INTO movies(movie_id, movie_title, movie_release_date, movie_audience)
		VALUES
		    <foreach collection="list" item="item" separator=",">
			(#{item.movie_id}
			, #{item.movie_title}
			, #{item.movie_release_date}
			, #{item.movie_audience})
	    </foreach>
		ON DUPLICATE KEY UPDATE
			movie_audience = values(movie_audience)
	</insert>
		
	<insert id="insertMovie">
		INSERT INTO movies(movie_id, movie_title, movie_release_date, movie_audience)
		VALUES(
			#{movie_id},
			#{movie_title},
			#{movie_release_date},
			#{movie_audience}
		)
	</insert>
	
	<!-- 리뷰 조회 -->
    <select id="selectReview" resultType="com.itwillbs.c5d2308t1.vo.ReviewBoardVO">
        SELECT *
        FROM reviews
        WHERE movie_id = #{movie_id}
        ORDER BY review_date DESC
    </select>
    
    <select id="selectAllMovie" resultType="movies">
    	SELECT *
    	FROM movies
    	WHERE movie_status = 0
    </select>
    
    <!-- 메인 페이지에 표시할 트레일러 가져오기 -->
    <select id="selectMovieTrailerList" resultType="movies">
    	SELECT *
		FROM movies 
		WHERE movie_trailer != ""
		AND movie_status != 2
    </select>
    
    <!-- 영화 목록 조회 -->
    <select id="selectTheaterName">
		SELECT theater_name
		FROM theaters    
    </select>
    
    <!-- 상세 페이지에 출력할 연령대 차트 데이터 -->
    <select id="selectAgeGroupList" resultType="map">
	    SELECT FLOOR((YEAR(CURDATE()) - YEAR(m.member_birth)) / 10) * 10 AS age, COUNT(*) AS count
		FROM resView r JOIN members m
		ON r.member_id = m.member_id
		WHERE r.movie_id = #{movie_id}
		GROUP BY age
		ORDER BY age ASC
    </select>
    
    <!-- 영화 상세페이지에 사용할 성별 통계 -->
    <select id="selectGenderGroupList" resultType="map">
		SELECT m.member_gender, COUNT(*) AS count
		FROM resView r JOIN members m
		ON r.member_id = m.member_id
		WHERE r.movie_id = ${movie_id}
		GROUP BY member_gender
    </select>
    
    <!-- 종영작으로 수정하는 작업 -->
    <update id="updateMovieEndingStatus">
    	UPDATE movies
    	SET
    		movie_status = 2
    	WHERE 
    		movie_id = #{movie_id}
    </update>
    
    <!-- 리뷰 체크 새로 작성 -->
    <!-- 리뷰조건 판별 -->
    <select id="selectReviewCheck" resultType="hashmap">
    	SELECT *
		FROM reviewcheck
		WHERE member_id = #{member_id}
		AND movie_id = #{movie_id}
		AND payment_status = '1'
		ORDER BY play_date ASC, play_end_time ASC
		LIMIT 1
    </select>
    
<!--     <select id="selectMovieReserve"> -->
<!--     	SELECT * -->
<!--     	FROM  -->
<!--     </select> -->
    
</mapper>